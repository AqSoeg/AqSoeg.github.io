{"pages":[{"title":"关于我","text":"懒得写，以后再说","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"2015年の荒川へ","text":"課程デザインと期末テストが終わり、日付は7月に変わった。 私にとって、7月は一年中最も悲しい時期である。 火であり、斜陽であり、別れでもある。 あれから一年が過ぎ、そろそろ何か書こうと思って、あなたの誕生日の今日で、私はこの文章を書くと決めた。 東京生活記録あれは2015年の夏。 ビリビリのホームページで「東京生活記録」というタイトルの動画が見つかった。あの動画のサムネイルは一つの変な人形だった。私は好奇心であの動画を再生した。 それが私とあなたの出合い。 一人の十五歳で二次元にハマっていた少年にとっては、「東京」という言葉の魅力が言うもなく大きい。 最初は東京に誘われ、西日暮里、荒川、スカイツリーなど見知らぬところに私は興味が持ち、毎回も動画を見る。 しかし、見れば見るほど、私は「本当に面白い人だなぁ」と思い始めた。 道に歩いながら、なんだかんだ喋るところが好きだった。 今も思い出せる、あなたが行った場所。 荒川沿い、自転車に乗っていた人々。 秋葉原、歩行者天国、ビッグマック。 東京大学、部活室。 スカイツリー、東京タワー。 そして、西日暮里、屋上。 あなたはギブリが好きで、私もあれからギブリが好きになった。 あなたは三島由紀夫が好きで、動画まで撮って紹介した。私もあれから三島を読み始めた。 私はあなたの振る舞いや、言葉や最高にかっこいいと思い、とても好きだった。 考えたら、今の私には、大体半分くらいはあなたに影響された。 人生の先生と言っても過言ではないね。 東京から南京へ「いつか皆さんは私の動画を見ないことが私にとって嬉しいです。」とあなたが言った。 高校生になってから、学業に勉強していた一方で、生活はなんとなく充実になったかもしれない、私はあなたの動画を見なくなった。 時間がどんどん進んでいく。 運命とか、縁起とか、私は信じない。 しかし、私は南京の大学に受けた。あなたの、故郷の大学。 こうして、私はあなたと繋がってる感じがした。 あなたが遊んだあの公園、あの階段、あのピンポンボール、いつか行ってみたいだね。 三島由紀夫と羊をめぐる冒険去年の春、あなたは一つの動画をアップした。 あの動画で、大好きな三島由紀夫を紹介し、三島さんの本の読む順番も推薦した。 その後、あなたはウェイボーで「江蘇のどこかで羊が見えるの？」と。 数日後、あなたは羊の群れの写真をアップした。 「いいなぁ、あなたは相変わらずかっこいい。」私はこう思った。 そして、7月5日。 2020年7月4日凌晨，叶修于南京结束了自己的生命 あなたの最後の一言。 その後、私は村上春樹の「羊をめぐる冒険」を読んだ。 その本の中で、「活到25岁，然后死掉」という言葉がある。 それが、あなたの思い込みなのか。 Guaranteed Don’t come closer or I’ll have to go あなたはきっと、色々考えたから、死に選ぶことが決まったのが私は信じている。 だから、私はその点を否定しない。それだけでなく、私は「おめでとう」と、苦難から逃げられたことに祝う。 ね、ヨウさん、航海に行きたいってあなたが言っただろう？ あれから一年、どう、あの広くて青い海の景色は？ 「行かないで」とか、「どうしてそんな事を」とか、私は言わない。 ただ時々、あなたのことが私は思い出し、悲しくなる。 後悔はもちろんしちゃうよ、そんなに近かったのに、あったこと一回もない。機会があったのに… ありがとう、たくさんの風景を私に見させて。 ありがとう、今の私を作り上げて。 ありがとう、叶修。","link":"/2021/07/05/2015-arakawa/"},{"title":"By making a song can I keep the memory?","text":"我的2021年终总结 随着考研告一段落，2021年就这样悄无声息地过去了。而我也在周期性地陷入迷茫，像死鱼一样躺了几天之后，终于想起已经时至年尾，该写些什么来虚假地总结和纪念一下这过去的平凡又乏味的一年了。 尽管我每年都会写年终总结，但每次都不知从何下笔，从取标题开始就被难倒。毕竟只是一个死宅大学生而已，一年里又能发生些什么值得写的事呢？ 姑且容我流水账般回忆一下这一年里发生过的，给我留下印象的事吧。 烟花三月，终于下了一趟扬州。第一次尝试青旅，运气很好，遇见了能够一起吃饭观光的小学弟。算是我的社交恐惧症治愈之路上的第一个疗程吧。 五月和老同学们去了无锡和苏州。有点可惜的是，去的时候赶上节假日，所以到处都是人山人海，以至于没有去成苏州博物馆。以后还要找个时间去一次。 之后就是颓废的暑假。七月在家浪费了一个月，依然是日复一日地做着我浪费生命的老一套。八月开始有了些危机感，复习进度捡起来一些。 回学校之后的时间就好像按下了加速键。每天重复着早起去图书馆，晚上十一点回宿舍的日子。还没等我反应过来，手机上显示的时间就从十月变成了十一月、十二月。 虽然我对于考研并不是抱着玩玩的心态去应付的，但也不到「如果考不上这辈子就完了」的程度。所以尽管我没有哪一天是没去学习的，但没有尽全力这一点我也是心知肚明。可能对我来说，所谓的尽全力根本不存在吧。 所以上考场时的状态不佳也是我自食恶果。但是即使自我感觉再差，过去的事也已经过去，这里就不谈了吧。 今年网易云的年终报告，我听得最多的歌是《Reflexion, allegretto, you》，听了七百多遍。我今年最庆幸的事就是二刷了《利兹与青鸟》，发现了三年前第一次看时没发现的美好。一周内看了四遍，还买了BD，让我找回了当年看君名时的热情。 ED我也听了很多遍。当前奏的吉他声响起时，我的脑海里总是浮现出飘飞的水蓝色裙摆、游曳的夏日光斑和摇摇欲坠的未来。 上大学之后，体感时间流逝得越来越快。回看前几年的年终总结，焦虑和迷茫总是主题。而当下正处在转折点的我，依然在踌躇满志和混吃等死的叠加态中撕扯着，迎来了2022年。 Feeling so anxious each spring time We are flapping about like plastic bags How would I sing? Golden reflections of our life In the afternoon sunlight Chocolates melt in my pocket By making a song can I keep the memory? I just came to love it now","link":"/2022/01/02/2021Summary/"},{"title":"Can we play a love song","text":"長い冬が終わる瞬間 笑顔で迎えたいから 我终于决定好好写博客了。 其实早就想自己搭个博客，来抒发自己无处安放的表达欲。而我也确实曾经用Hexo和GitHub搭过一个，但是由于惯例的三分钟热度，搭好之后就无限搁置了。 而这次的念头来自昨天，无意中看到了别人的博客。而我也确实从他的文章中感觉到，这是个有趣的人。 不同于音乐和影像，文字是有其独特魅力的。在自我表达方面，文字并不弱于任何一种媒介。而文字的门槛，也是最低的。不需要懂乐理，不需要懂光影和构图，只要接受过正常教育的人，多少能扯个几句话出来。 以前用过没加好友的小号的QQ空间写日志来着，其实还挺顺手，毕竟只是写字而已，也不需要什么花里胡哨的功能。后来用Notion，确实好看点，还支持Markdown，写起来也舒服。但是这两个都有个问题，那就是没法给别人看。而且身为程序员没个博客像话吗 其实也不太想给别人看。毕竟我们资深社恐，最擅长的就是把所有话都憋在心里。 但是我不想再社恐了。 前几天重看了一遍「四叠半神话大系」。上一次看还是高中吧，当时看只觉得森见牛逼，汤浅牛逼，这就是动画该有的表现方式！ 但是经过这一次二刷，我才更加体会到被困在四叠半大小的空间内的无所适从。 虽然人与人之间的A.T.Field坚不可摧，不同的人永远无法相互理解。但我还是想尝试一下，把真实的自己一点点、一点点地揭开。 所以心血来潮，昨天花了一晚上，买了域名，配置了Hexo。 这个博客以后应该会长期更新吧。目前的话，是有这么几个想法： 写写随笔 学习笔记 技术相关 那就先写到这了，希望这次不要再三分钟热度。 毕竟域名是花了钱的！","link":"/2021/06/09/Can-we-play-a-love-song/"},{"title":"KMP Algotirhm","text":"IntroductionPresume we have a string S (length is m) and a pattern P (length is n) given as follow: 123index: 1 2 3 4 5 6 7 8 9 10 11 12S: a b a b a a b a a b a cP: a b a a b a c Now we want to find out is there a sub-string in S that matchs P exactly, which in this case is S[6:12]. That is what KMP algorithm does. Proper Prefix &amp; Proper SuffixBefore learning KMP, let’s make this clear first: what is proper prefix and proper suffix? Proper prefix: All the characters in a string, with one or more cut off the end. “S”, “Sn”, “Sna”, and “Snap” are all the proper prefixes of “Snape”. Proper suffix: All the characters in a string, with one or more cut off the beginning. “agrid”, “grid”, “rid”, “id”, and “d” are all proper suffixes of “Hagrid”. Partial Match TableThe key to KMP, it’s the Partial Match Table. Let’s see a example. 123char: | a | b | a | a | b | a | c |index: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |value: | 0 | 0 | 1 | 1 | 2 | 3 | 0 | I see, there’s a table. But what do these values mean? The length of the longest proper prefix in the (sub)pattern that matches a proper suffix in the same (sub)pattern. For example, at index 1, we have a sub-string “a”. Its proper prefix and proper suffix are both null, so it’s value is 0. At index 2, we have a sub-string “ab”, with proper prefix “a”, and proper suffix “b”, and they do not match each other, there’s another 0. At index 3, we have a sub-string “aba”, with proper prefix “a” and “ab”, and proper suffix “a”, “ba”. We can see that they both contains “a”, which we call “match”. And the length of “a” is 1, so its value is 1. At index 4, we have a sub-string “abab”, proper prefix “a”, “ab”, “aba”, and proper suffix “a”, “aa”, “baa”. They both cotains “a”, which legth is 1, so there’s 1s in its value. etc. How to use Next ArrayThe next array is baes on the pattern. What is cofusing is that on the internet, most blogs and videos, next array and PMT table are just the same thing, but in Wangdao’s text book, the PMT is different from next array. Well, I’ll just make them be the same. In bruce force searching, we search the S one letter by one letter, like this: 12345678910First run:S: a b a b a a b a a b a cP: a b a a &lt;- mismatchSecond run:S: a b a b a a b a a b a cP: a &lt;- mismatchThird run:S: a b a b a a b a a b a cP: a b a a b a c &lt;- mismatch... Obviously, it is very slow, and its time complexity is $O(mn)$. Check this: 123456789First run:S: a b a |b| a a b a a b a cP: a b a |a| &lt;- mismatchSecond run:S: a b a b a a b a |a| b a cP: a b a a b a |c| &lt;- mismatchThird run:S: a b a b a a b a a b a cP: a b a a b a c &lt;- match! We can see that after mismatch, P is not going forward one letter by one letter., but jumps forward. And through the next array we can know where should P jump to. In the first run, P[4] and S[4] mismatch, and next[4 - 1] is 1 which means in the substring from P[0:4], the prefix and subfix of 1 letter are the same, so we move P and make it match the S with its proper prefix instead the subfix that mismatched. In the second run, P[7] and S[9] mismatch, and next[7 - 1] is 3, which means the first and the last 3 letters in the substring from P[0:7] are the same, in this case is “aba”. So we move P forward till the first 3 letters take place of the last 3 letters. etc. Construct a Next Array123456789101112void get_next(String P, int next[]) { int i = 1, j = 0; next[0] = 0; while(i &lt; P.length) { if(j==0 || P[i] == P[j]) { i++; j++; next[i] = j; } else { j = next[j - 1]; } }} PracticeAcwing: 831.KMP字符串 ReferencesYoutube: Abdul Bari - Knuth-Morris-Pratt KMP String Matching Algorithm Zhihu: 阮行止 - 如何更好地理解和掌握 KMP 算法? Blog: The Knuth-Morris-Pratt Algorithm in my own words","link":"/2021/07/08/KMP-Algotirhm/"},{"title":"死、宝石、夕阳与春雪","text":"她边说边泛起一种焦灼感。然而，就像向别人描述死、宝石的闪光和夕阳的优美一样，这乃是最难的事情。 前言今天终于把三岛由纪夫的《春雪》读完了。 这是我读的第三本三岛。前两本是《金阁寺》和《假面的告白》。 《金阁寺》是高中的时候读的。读的是唐译本。一方面觉得文字极其精致，一方面也确实掉入了华丽辞藻编织出的陷阱里。 简而言之，没读懂，囫囵吞枣。这本薄薄的，被称作三岛的代表作的小说，在我脑海中留下的印象单薄却持久：那只屹立在金阁寺顶上，在时间和空间的永恒流动中岿然不动的黄金凤凰。 《假面的告白》是几个月前读的。读的是陈译本。这是三岛作为作家，所发表的第一部小说。文字的华美从这时就已经让人哑然。 这本自传性小说，也确实让我得以一窥这位伟大作家的真实。所有这本书的读者肯定都忘不了，那副《圣塞巴斯蒂安殉教图》。我也是从这时候才略微领会三岛对于「美」的追求。 健康、死亡。 这两者都是三岛所追求的美的一环。对于生者——从三岛自己就能看出来——他向往健硕的、威严的、如同太阳与铁的不可逆的肉体。但他更喜欢的，或者说，觉得更美的，则是这不可逆的、象征着生的肉体被死亡所吞噬。 日本人所谓的「物哀」，指的是对于萧条、衰败的景物产生的哀伤之情。而三岛将这种感情投射到人，发展出了独属于他的美学。 所以我在读之前也很容易地猜到了，《春雪》的结局必然是悲剧。 三岛的美学 没有什么东西比已达成的恋情更加不值一提了。 清显和聪子明明两情相悦，为何最后偏偏沦落到一人剃度，一人病逝？ 且抛开三岛的「暴烈」不谈。 清显年方十七八，面对比他大两岁的青梅竹马聪子，在男性和新晋贵族身份的两道枷锁的禁锢下，当然渴望在恋情的角力中掌握主导权。他跟聪子的几次拉扯，虽不理智，但是合理。二人的感情在共赏春雪的时刻达到高潮，这是三岛为读者创造的「美」。 塞林格说：爱是想触碰又收回手。 而清显显然不这样认为。 在聪子和王爷订下婚约后，他才发觉「我热恋着聪子」。在镰仓的海边，在那名为「不可为」的夜幕的包裹之下，三岛将他的美学之幕揭开——「为所不可为」。 这份相互折磨的爱，越是危险，越让人感到欲罢不能。于清显，于聪子，于读者，于三岛，都是这样。 所有人都享受着这份漆黑夜色中的耳鬓厮磨，尽管天空即将破晓、美好面临毁灭也无法收手。因为当这份世俗的美被毁灭，原地重新诞生的将是永恒的美，也是三岛一生所追求的美——「死亡」。 瞎扯《春雪》的阅读体验，实在是我从来都没有经历过的。 首先提一下，这次读的是文洁若的译本。感觉比前两次好读些。 花了一个多月读了三分之二，昨天和今天一口气读完了最后三分之一。在读到最后时，内心也被一种巨大且不可名状的悲伤所填满。以至于读完之后还久久不能平静，整个下午都无心做其他事。 读《春雪》之前，我对三岛的认知是「用华丽的文字包裹简单的故事」。 但是现在看来并非如此，在华丽的文字之下，包裹的是同样华丽的故事。 没有一处描写是无用的，登场的众多人物，每个人的形象都跃然纸上。 借明治维新而成为新兴贵族的松枝家，色厉内荏的松枝侯爵与蹴鞠世家，吃了二十七代皇粮却逐渐衰微的绫仓伯爵。这二人的对手戏，如果深挖的话，想必也是可以对日本贵族制有更加清晰的认识的吧。可惜我学疏才浅，做不到了。 从鹿儿岛来的学伴饭沼、服侍绫仓家几十年的老妪蓼科，两人分别服侍着故事的两位主角，却抱着完全不同的态度。饭沼怒清显不争，无比怀念旧时代，而蓼科则是无条件服从聪子，实质却在谋划十几年的复仇。二人对比，深层次剖析的话，也会很有趣吧。 … 可细细品味的地方太多了。等我把丰饶之海四部读完，多了解一些背景知识，一定再读一遍。 摘抄 清显从海潮的奔腾和漫长时间的流逝中，突然察觉到自己不久也会走入老境，而泛起一阵子窒息的感觉。他从来没有想过要获得什么老年人的智慧。他想的只是怎样才能在年轻的时候就溘然死去，而且尽可能不感觉痛苦。宛若一件华丽绸和服随便脱下来扔在桌子上，不知不觉又滑落在昏暗的地板上那么优雅。 三岛对于死亡的描写太美了。 此刻，忽然觉得天光暗了下来，一群飞鸟从天涯海角涌过来，叫声四起，直逼头顶，清显就举枪勾动了扳机。这不单单是无情的射击，而是心中充满不可言状的愤怒和悲哀，与其说是对着群鸟，莫如说是向着太空那只巨大的蓝眼开的枪。 群鸟一齐被打了下来，眼看着一阵带血的龙卷风呐喊着把天和地连接起来了。所以这么说，那是因为无数的鸟儿嘶鸣着，滴着鲜血，密密麻麻地聚集成一根粗大的望不见顶端的柱子，向着地面的一点俯冲下来，就仿佛是水量极大的瀑布带着吼声和血色，没完没了地从天上落了下来。看上去，确实酷似那连续不动的龙卷风。 这段读起来超有画面感。 恋爱中的男人，他的心是容纳不下恋爱之外的任何事物的。甚至对别人的悲痛，也都丧失了同情心。 是啊。 两个小伙子心里所拥抱的两个截然不同的世界的影子，将其尖端突出地显示在煤油灯那黄雾般的光圈中。一个因恋爱而卧病，一个为坚固的现实而学习。清显恍如在梦境里，他被海藻缠住了脚，在混沌的爱之海中泅水；本多则向往着牢固地建立在地面上的井井有条的理智的建筑物。 情感和理智，毁灭和秩序。","link":"/2021/06/12/harunoyuki/"},{"title":"ただ力の抜けた光る方へ","text":"我的考研记录 今天是2021年8月1日。从三月份开始准备，到现在考研进程也已过半。 想着不妨写些东西，一是对前半段的复盘，二是督促自己，三是给以后留个回忆。 择校之前一直无法定下目标院校，在各大高校之间徘徊。一开始是北邮、东南，后来是华科、武大、浙大。不过其实我不太想去北邮，只是因为我校考北邮上岸的很多，所以我下意识觉得应该比较好考而已。 上大学前，我对大学的幻想大多来自汪曾祺先生在其散文中介绍的西南联大。 我想象中的大学，应该更具人文气息。而根据我本科在理工科大学经历的这三年来看，其显然过于冷峻了。 大学之大，不在其面积，而在其包容。学科建设全面一些的大学，我认为是会更加丰富且多元一些的。 所以我很想读一读综合类大学，这是其一。 其二就是，我很想去上海。也不知道哪里来的上海情结，反正就是特别有好感。 说来惭愧，高三的时候很想考华师。当时还跟好朋友约好了，她考交大，我考华师，到时候就是邻居了。 结果两个人都没考上，自然也没做成邻居。 而三年过去了，我还是很想去上海。我想去看各种艺术展，想去梅奔看演唱会，想去cp，想参加上影节。 还是有些985情结。而交大和复旦，我感觉高攀不起。于是华师显然是最好的选择，计算机水平不错，考的人又少。 何况还有意外之喜——华师考的是数二英二。英语倒是无所谓，但是之前一直按照数一备考的我突然感觉松了一口气。数二比数一少了概率论、级数、线面积分之类又多又难的内容，对于我这种被数学按在地上摩擦了一辈子的数学废物来说简直如同天降福音。 「就它了，」在华师官网上看到「数学二」三个字时，我心想，「不要太适合我。」 那么定下目标院校的我，有没有做出相应的努力，好好学习呢？ 呵呵。 于是我浪费了整个七月的时间。 规划八月 现在看来，其实放暑假之前，我在学校里的学习状态还算好，进度也还可以。但是一到暑假就一如往常地陷入了颓废的境地。 既然七月已经被浪费了，那么八月就要加倍努力追上来。每天学习10小时吧。 为了不再只是嘴上说说，姑且列个计划表吧，感觉这样比较有用。 到八月底，应该完成的： 高数强化 计组一轮（8/15） 操作系统一轮（8/23） 数据结构一轮（8/30） 英语刷完16年以前的阅读真题（8/27） 政治每天一小时以内，学到哪算哪 同时也该准备一下九月的PAT了。（战略性放弃，先管初试吧） 今天就先写到这，之后视情况再更新。 九月 既然开学了，能够复习的时间肯定是要少于八月的。 而且返校的那天也要浪费一天。 到九月底，应该完成的： 线代强化 高数880 计网二轮 计组二轮 操作系统二轮 数据结构二轮 英语阅读二刷（优先级低） 时间轴8/15 更新： 今天把计组过完了。打算接下来再按章总结，同时开始复习OS。 英语做到了14年。13年的阅读只错了一个，感觉还不错。 高数目前到一元函数积分学。感觉应该增加做题的时间，减少看视频的时间。 这一周由于胃痛的缘故，学习时间比上周大大减少…上周好不容易对自己有了点信心，又消磨殆尽了。 新的一周，希望专注力能再提高一些，希望胃痛能缓和。 8/23 更新： 操作系统一轮结束。 果然还是比计组友好不少啊。我甚至还做了笔记，居然才花了计组一半的时间。 今天看着操作系统只剩下最后一节，突然就开始提不起劲，以至于下午基本都在摸鱼，晚上才把这一节看完。 明天开始数据结构。之前已经看到第四章了，所以应该两三天就能看完。然后进入二轮，以及增加数学的时间。 高数到常微分方程了。 关于自己老是犯低级错误，算错、看错符号之类的，我也许找到原因了。 还是一直以来困扰着我的问题。大脑活动停不下来，永远被无关紧要的事情占据。 就像进程调度的SJF算法，一直在处理最短的任务，把其他的进程都饿死了。 而我也是，难以把注意力放到眼前重要的事情上面。 比如读书时，思绪读着读着就飞走了，从获取信息变成了只是用视线扫过文字而已。 比如做题时，式子化简之后抄下来，大脑直接放弃思考要不要变号，就原封不动地抄下来。 我不知道这种问题是从何而来，也不知道怎么做才能改善。想来也许是小时候，一边吃饭一边看电视，过早地让自己一心二用，导致没有培养起来专心的能力。以及微博之类的碎片信息流，大概也是一部分原因。 所以最近在尝试冥想正念，让自己什么也不想，排除掉在脑海中过于活跃的杂乱信息。以及在碎片时间尽量不用手机，减少无用信息的摄入。 还有英语，这个就很舒适了。 13年错1个，14年错2个，15年错1个。不知道是我变强了还是阅读变简单了，我现在对英语的信心是前所未有的强。做完阅读之后再尝试做几篇完型吧，做得好的话，说不定真能上85。 不过有点可惜，没有一年是全对的。16年的还没做，不过听说这年比较难。 我也许到极限了。 我是指睡眠时间。 这段时间以来每天睡6小时，中午睡半小时左右。 而我昨天尝试着再缩短一下这个时间。定了5小时的闹钟，但是完全起不来，还是在床上多躺了一个小时。 6小时的睡眠时间是我在高中就尝试过的。当时从哪看到说，人的睡眠周期是一个半小时，睡眠最好是这个时间的倍数。事实证明，我睡6小时确实比睡6个半~7小时精神点。 所以打算今天试试4个半小时睡眠。如果失败的话，那就证明我的极限就是6小时了。 哇，4个半小时，听起来好吓人。真的能做到吗，不会猝死吧？ 8/30 更新： 时间终于来到了八月底。 各项任务也是ギリギリ完成了，还算不错。 今天是开学第一天。不知不觉就大四了，完全没有实感。课虽然不是很多，但总归还是会有影响，只希望影响不要太大。 数学到二重积分了，也就是高数的最后一章。接下来就边刷880边线代。线代感觉没时间再看视频了，直接看书做题吧。进度太慢了，之后要增加学数学的时间。 说是这么说，但还是不愿意自己做题。碰到难点的题就不太想思考。也许是对数学的恐惧积重难返吧。 英语。前几天把16年的阅读刷完了，错了两个。就很遗憾，一次全对都没有，多少有点气馁了。然后把完型给写了，居然全对。不过也不知道是这年阅读比较简单还是我真的挺强。总之这下也是给了我不少信心。如果今年阅读简单点的话，也许85还是挺稳的？（我就随便想想） 接下来打算把英语先放一段时间，挪出时间给数学和408。等到十月再开始作文。 感觉即使看了很多方法论，我做题还是靠语感。读不明白的长难句就多读几遍，一般都能读懂。所以二刷阅读真的有必要吗？ 数据结构。其实早该完成的，毕竟只剩下三章，一天一章完全没有难度。但是还是太摸了，这几天学习状态都不怎么好，所以拖到了现在。 这样的话，408总算是一刷结束了。这一套学下来，果然还是DS最友好，我一刷的正确率也最高。然后计网和OS差不多吧，计组毫无疑问的最难了。 政治。马原部分的视频看完了，1000题也做了些。之后的部分就不看视频了，直接做题吧。纸质书 + Anki每天刷。 有些焦虑。看到其他人408都开始刷真题了，数学也在二刷。随着剩下的时间一天天缩短，我产生「如果没考上怎么办」的想法的频率也高了起来。这种时候也只能强行让自己不去想了。毕竟路是自己选的，总该好好走完。高考没能达成的目标，过了四年还没法达成的话，也太没用了吧。 对了，我果然做不到一天只睡四个半小时。 1/1 更新： 本来还以为能多记一点的，结果开学后根本没时间。 考研就这样悄无声息地结束了。 虽然自觉考得很差，但是已经结束了，那就随它去吧。不想再想了，这种经历不想再有第二次了。 出成绩了再来更新。","link":"/2021/08/01/kaoyan/"},{"title":"网易云音乐上传歌词&amp;翻译","text":"初めから チグハグだったけど 前言前几天听推荐的时候听到了しおんあい的「私の街」这首歌。 嗯，感觉旋律不错。想看看歌词，点开一看，居然没有翻译！ 那就自己来吧。毕竟现在没歌词/翻译的歌还挺少见的，难得有机会，那我当然是跃跃欲试。 作为一个翻译过几万字（虽然也不是什么严肃内容）的翻译爱好者，一篇歌词而已，那不是信手拈来？ 抱着这种心态，飞快地翻译完并提交了。 然后就没过审核。 可恶啊 就这样，我的歌词翻译之路走到了尽头。 本文完。（ 过了两天，我发现しおんあい桑发新歌了。 这首也挺好听的 所以我又手痒了。 歌词部分获取歌词本文以「Tallest Liar」这首歌为例。 首先用Google搜索「Tallest Liar しおんあい」。 一般来说，如果这首歌出了一段时间，那都是能搜到现成的歌词的。 比如J-Lyric，歌ネット这些网站，一般都会有歌词。这里推荐J-Lyric，因为歌ネット不让复制。 但是这首歌比较新，当时才刚出两天。没有现成的歌词。 「那就自己动手！考验听力的时候到了！」 你以为我会这么说吗？怎么可能，我听中文歌都不一定能听懂歌词的。 于是求助万能的油管。 这首歌是有PV的，而PV里是有歌词的。 那就抄下来呗。 新建txt，一句一行，保存。 接下来就是让歌词滚动起来了。 打轴试了几个打轴工具，我比较推荐灯里的歌词滚动姬 它的一个优点是：加载音频时可以用外链，而不一定要上传本地文件。（没有网易云会员我也下载不下来啊） 使用方法就不详细介绍了，反正把刚刚的txt文件传上去，打就完事了。 打完轴之后的成品如下： 上传打开网易云网页端，然后点这个上传歌词。 翻译部分网易云官方推荐上传双语歌词，原文和翻译在同一行，中间用空格隔开。 可以。 但千万别。 我试了，结果就是这样。 哦，行吧。 那就先提交歌词呗。 这次审核还挺快的，第二天就过了。 然后上传翻译，审核更快了，几个小时就过了。 最终效果 总结就，看见自己的翻译还挺有成就感的。 哦，顺便说一下，网易云的审核人员大概是既不懂日文，也不懂中文吧。 这种垃圾翻译都给过","link":"/2021/06/10/netease-music/"},{"title":"从零开始的算法题解","text":"始まりと終わりのプロローグ -Turning Point- 简单模拟【PAT B1009】说反话 问题给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 输入测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。 输出每个测试用例的输出占一行，输出倒序后的句子。 思路使用scanf读入（因为scanf读到空白字符会终止）到一个二维字符数组中，然后逆序输出。 注意，在读入时可以使用EOF来判断是否输入完毕 代码12345678910111213141516#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;int main() { int num = 0; // 单词个数 int ans[90][90]; // 字符数组 while(scanf(&quot;%s&quot;, ans[num]) != EOF) { num++; } for(int i = num - 1; i &gt;= 0; i--) { printf(&quot;%s&quot;, ans[i]); if(i &gt; 0) printf(&quot; &quot;); } return 0;} 【PAT B1011】A+B 和 C 问题$给定区间[−2^{31},2^{31}] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C $ 输入$输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。$ 输出对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。 思路注意数据范围，int不够，要用long long 代码123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;int main() { int t, int count = 1; long long a, b, c; cin &gt;&gt; t; while (t --) { cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; if (a + b &gt; c) { cout &lt;&lt; &quot;Case #&quot; &lt;&lt; count &lt;&lt; &quot;: true&quot; &lt;&lt; endl; count ++; } else { cout &lt;&lt; &quot;Case #&quot; &lt;&lt; count &lt;&lt; &quot;: false&quot; &lt;&lt; endl; count ++; } } return 0;} 【PAT B1026】程序运行时间 问题要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。 这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。 输入输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 $[0,10^7]$。 输出在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。 思路有个坑：输出时必须输出两位，所以不足两位的要用0补齐，所以用 printf(%02d)，意思是输出两位，不足的用0补齐 代码1234567891011121314151617181920212223#include &lt;iostream&gt;using namespace std;int main() { const int C = 100; int c1, c2; int clocks, sum; scanf(&quot;%d%d&quot;, &amp;c1, &amp;c2); clocks = c2 - c1; // 四舍五入 if (clocks % 100 &gt;= 50) { sum = clocks / C + 1; } else { sum = clocks / C; } int sec, min, hour; hour = sum / 3600; min = sum % 3600 / 60; sec = sum % 3600 % 60; printf(&quot;%02d:%02d:%02d\\n&quot;, hour, min, sec);}","link":"/2022/01/10/Algorithm-Solution/"}],"tags":[{"name":"日语","slug":"日语","link":"/tags/%E6%97%A5%E8%AF%AD/"},{"name":"想法","slug":"想法","link":"/tags/%E6%83%B3%E6%B3%95/"},{"name":"总结","slug":"总结","link":"/tags/%E6%80%BB%E7%BB%93/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"三岛由纪夫","slug":"三岛由纪夫","link":"/tags/%E4%B8%89%E5%B2%9B%E7%94%B1%E7%BA%AA%E5%A4%AB/"},{"name":"读后感","slug":"读后感","link":"/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"},{"name":"考研","slug":"考研","link":"/tags/%E8%80%83%E7%A0%94/"},{"name":"音乐","slug":"音乐","link":"/tags/%E9%9F%B3%E4%B9%90/"}],"categories":[{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"},{"name":"读书","slug":"读书","link":"/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"分享","slug":"分享","link":"/categories/%E5%88%86%E4%BA%AB/"}]}